Imports ParsecAdmin
Imports ParsecPro
Imports Telerik.Web.UI
Imports System.IO
Imports System.Net
Imports System.Xml
Imports System.Data.Objects

Public Class FiltroFatturaConservazione

    Public Property DaInviare As Boolean = False
    Public Property Inviati As Boolean = False
    Public Property Archiviati As Boolean = False
    Public Property DataInizio As Nullable(Of DateTime) = Nothing
    Public Property DataFine As Nullable(Of DateTime) = Nothing

End Class

Public Class FatturaConservazione

    Public Property Id As Integer
    Public Property NomeFile As String
    Public Property NumeroProtocollo As String
    Public Property AnnoProtocollo As Integer
    Public Property DenominazioneFornitore As String
    Public Property IdentificativoSdI As String
    Public Property Oggetto As String
    Public Property PartitaIvaFornitore As String
    Public Property PercorsoRelativo As String
    Public Property VersioneFattura As String
    Public Property DataRicezioneInvio As Date

    Public Property IdDocumentoWS As Integer?
    Public Property IdPacchettoVersamento As Integer?

End Class


Partial Class GestioneConservazioneFattureElettronichePage
    Inherits System.Web.UI.Page

    Private WithEvents MainPage As MainPage

#Region "PROPRIETA'"

    Public Property CheckedRowCount() As Integer
        Get
            Return CType(Session("GestioneConservazioneFattureElettronichePage_CheckedRowCount"), Integer)
        End Get
        Set(ByVal value As Integer)
            Session("GestioneConservazioneFattureElettronichePage_CheckedRowCount") = value
        End Set
    End Property

    Public Property FatturaElettronica() As ParsecPro.FatturaElettronica
        Get
            Return CType(Session("GestioneConservazioneFattureElettronichePage_FatturaElettronica"), ParsecPro.FatturaElettronica)
        End Get
        Set(ByVal value As ParsecPro.FatturaElettronica)
            Session("GestioneConservazioneFattureElettronichePage_FatturaElettronica") = value
        End Set
    End Property

    Public Property FattureElettroniche() As List(Of FatturaConservazione)
        Get
            Return CType(Session("GestioneConservazioneFattureElettronichePage_FattureElettroniche"), List(Of FatturaConservazione))
        End Get
        Set(ByVal value As List(Of FatturaConservazione))
            Session("GestioneConservazioneFattureElettronichePage_FattureElettroniche") = value
        End Set
    End Property

    Public Property AllegatiFattura As List(Of ParsecPro.AllegatoFattura)
        Get
            Return CType(Session("GestioneConservazioneFattureElettronichePage_AllegatiFattura"), List(Of ParsecPro.AllegatoFattura))
        End Get
        Set(ByVal value As List(Of ParsecPro.AllegatoFattura))
            Session("GestioneConservazioneFattureElettronichePage_AllegatiFattura") = value
        End Set
    End Property

    Public Property HtmlFattura As String
        Get
            Return CType(Session("GestioneConservazioneFattureElettronichePage_HtmlFattura"), String)
        End Get
        Set(ByVal value As String)
            Session("GestioneConservazioneFattureElettronichePage_HtmlFattura") = value
        End Set
    End Property

    Public Property Cliente() As ParsecAdmin.Cliente
        Get
            Return CType(Session("GestioneConservazioneFattureElettronichePage_Cliente"), ParsecAdmin.Cliente)
        End Get
        Set(ByVal value As ParsecAdmin.Cliente)
            Session("GestioneConservazioneFattureElettronichePage_Cliente") = value
        End Set
    End Property

#End Region

#Region "EVENTI PAGINA"

    Protected Sub Page_Init(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Init
        Me.MainPage = CType(Me.Master, MainPage)
        Me.MainPage.NomeModulo = "Protocollo"
        Me.MainPage.DescrizioneProcedura = "> Conservazione Fatture Elettroniche"

        Dim css As HtmlGenericControl
        css = New HtmlGenericControl
        css.TagName = "style"
        css.Attributes.Add("type", "text/css")
        css.InnerHtml = "div.RadUploadProgressArea_Office2007 .ruProgress { background-image: none;}" & vbCrLf
        css.InnerHtml += ".RadUploadProgressArea { width: 320px !important;}" & vbCrLf
        css.InnerHtml += "div.RadUploadProgressArea li.ruProgressHeader{ margin: 10px 18px 0px; }" & vbCrLf
        css.InnerHtml += "table.CkeckListCss tr td label {margin-right:10px;padding-right:10px;}" & vbCrLf
        Me.Page.Header.Controls.Add(css)

        If Not Me.Page.IsPostBack Then
            Me.FattureElettroniche = Nothing
            Me.AllegatiFattura = New List(Of AllegatoFattura)
            Me.HtmlFattura = Nothing
            Me.CheckedRowCount = 0
            Dim utenteCollegato As ParsecAdmin.Utente = CType(ParsecUtility.Applicazione.UtenteCorrente, ParsecAdmin.Utente)

            Me.ResettaFiltro()

            'Imposto l'ordinamento predefinito.
            Dim sortExpr As New Telerik.Web.UI.GridSortExpression()
            sortExpr.FieldName = "DataRicezioneInvio"
            sortExpr.SortOrder = Telerik.Web.UI.GridSortOrder.Ascending
            Me.FattureElettronicheGridView.MasterTableView.SortExpressions.AddSortExpression(sortExpr)

            Dim clienteRepository As New ParsecAdmin.ClientRepository
            Dim cliente = clienteRepository.GetAll().FirstOrDefault
            Me.Cliente = cliente
            clienteRepository.Dispose()

            'Me.cmbStatoFattura.Items.Insert(0, New Telerik.Web.UI.RadComboBoxItem("Da Inviare", "0"))
            'Me.cmbStatoFattura.Items.Insert(1, New Telerik.Web.UI.RadComboBoxItem("Inviate", "1"))

            Me.chkDaInviare.Checked = True
            Me.chkInviate.Checked = False
            Me.chkArchiviate.Checked = False

            Dim limitePagine = GetlimiteNumeroPagineRicerca()
            If (limitePagine = -1) Then
                Me.NoPaging.Visible = False
            End If

        End If

        Me.FattureElettronicheGridView.GroupingSettings.CaseSensitive = False
        Me.ChiudiButton.Attributes.Add("onclick", "HidePanel();hide=true;return false;")
        Me.StampaFatturaButton.Attributes.Add("onclick", "printPage();HidePanel();hide=true;return false;")

    End Sub

    Protected Sub Page_LoadComplete(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.LoadComplete

        Me.TitoloElencoFattureLabel.Text = "Elenco Fatture Elettroniche " & If(Me.FattureElettroniche.Count > 0, "( " & Me.FattureElettroniche.Count.ToString & " )", "")

        If Not Me.HtmlFattura Is Nothing Then
            Me.pannelloFattura.Controls.Clear()
            Me.pannelloFattura.Controls.Add(New LiteralControl(Me.HtmlFattura))
        End If
        Me.DocumentiLabel.Text = "Allegati " & If(Me.AllegatiFattura.Count > 0, "<span style='width:20px;color:#00156E'>&nbsp;(" & Me.AllegatiFattura.Count.ToString & ")</span>", "")
        Me.ConservaFattureImageButton.Enabled = Me.FattureElettronicheGridView.SelectedItems.Count > 0
    End Sub

#End Region

#Region "EVENTI GRIGLIA"

    Protected Sub FattureElettronicheGridView_NeedDataSource(ByVal sender As Object, ByVal e As Telerik.Web.UI.GridNeedDataSourceEventArgs) Handles FattureElettronicheGridView.NeedDataSource

        If Me.FattureElettroniche Is Nothing Then
            Dim filtro = Me.GetFiltro
            If Not filtro.Inviati AndAlso Not filtro.DaInviare AndAlso Not filtro.Archiviati Then
                Me.FattureElettroniche = New List(Of FatturaConservazione)
            Else
                Me.FattureElettroniche = Me.GetDocumentiDaConservare(Me.GetFiltro)
            End If

        End If
        Me.FattureElettronicheGridView.DataSource = Me.FattureElettroniche


        '' ''If Me.FattureElettroniche Is Nothing Then
        '' ''    Dim fatture As New ParsecPro.FatturaElettronicaRepository
        '' ''    Dim listaFattureTemp = fatture.GetViewFattureDaConservare(Me.GetFiltro).OrderBy(Function(c) c.MessaggioSdI.DataRicezioneInvio).ToList

        '' ''    Dim listaFattureDaInviare As New List(Of ParsecPro.FatturaElettronica)
        '' ''    Dim listaFattureInviate As New List(Of ParsecPro.FatturaElettronica)
        '' ''    Dim listaFattureArchiviate As New List(Of ParsecPro.FatturaElettronica)

        '' ''    'quelle da inviare e quindi quelle con idDOcumentoWS nullo
        '' ''    If (chkDaInviare.Checked) Then
        '' ''        listaFattureDaInviare = listaFattureTemp.Where(Function(w) w.MessaggioSdI.IdDocumentoWS Is Nothing).ToList
        '' ''    End If

        '' ''    If (chkInviate.Checked Or chkArchiviate.Checked) Then
        '' ''        Dim wsConservazione As New wsConservazione.wsConservazione

        '' ''        Dim soapGetListaDocumentiRequest As New wsConservazione.SoapGetListaDocumentiRequest
        '' ''        soapGetListaDocumentiRequest.codiceLicenza = Me.Cliente.CodLicenza
        '' ''        Dim wsFiltroDocumento As New wsConservazione.DocumentoBaseConservazioneFiltro
        '' ''        wsFiltroDocumento.TipoDocumento = "FATTURAELETTRONICA"
        '' ''        soapGetListaDocumentiRequest.documentoFiltro = wsFiltroDocumento
        '' ''        Dim listaFattureWS = wsConservazione.getListaDocumenti(soapGetListaDocumentiRequest).ListaDocumentiBase
        '' ''        listaFattureTemp = listaFattureTemp.Where(Function(w) Not w.MessaggioSdI.IdDocumentoWS Is Nothing).ToList
        '' ''        If (chkInviate.Checked And Not listaFattureWS Is Nothing) Then
        '' ''            Dim listaIdWS = listaFattureWS.Where(Function(w) w.idPacchettoVersamento Is Nothing).Select(Function(s) s.idDocumento).ToList
        '' ''            If (listaIdWS.Count > 0) Then
        '' ''                'listaFatture = listaFatture.Where(Function(w) Not w.MessaggioSdI.IdDocumentoWS Is Nothing).ToList
        '' ''                If (listaFattureTemp.Count > 0) Then
        '' ''                    listaFattureInviate = listaFattureTemp.Where(Function(w) Not w.MessaggioSdI.IdDocumentoWS Is Nothing And listaIdWS.Contains(w.MessaggioSdI.IdDocumentoWS)).ToList
        '' ''                End If
        '' ''            End If
        '' ''            Dim listaIDWSArchvio As IEnumerable(Of Integer) = listaFattureWS.Select(Function(s) s.idDocumento)
        '' ''            Dim listaToAddInviateECancellateDaArchivio As List(Of ParsecPro.FatturaElettronica) = listaFattureTemp.Where(Function(w) Not listaIDWSArchvio.Contains(w.MessaggioSdI.IdDocumentoWS)).ToList
        '' ''            listaFattureInviate = listaFattureInviate.Union(listaToAddInviateECancellateDaArchivio).ToList
        '' ''        End If

        '' ''        If (chkArchiviate.Checked And Not listaFattureWS Is Nothing) Then
        '' ''            Dim listaIdWS = listaFattureWS.Where(Function(w) Not w.idPacchettoVersamento Is Nothing).Select(Function(s) s.idDocumento).ToList
        '' ''            If (listaIdWS.Count > 0) Then
        '' ''                ' listaFatture = listaFatture.Where(Function(w) Not w.MessaggioSdI.IdDocumentoWS Is Nothing).ToList
        '' ''                If (listaFattureTemp.Count > 0) Then
        '' ''                    listaFattureArchiviate = listaFattureTemp.Where(Function(w) listaIdWS.Contains(w.MessaggioSdI.IdDocumentoWS)).ToList
        '' ''                End If
        '' ''            End If
        '' ''        End If

        '' ''    End If

        '' ''    Me.FattureElettroniche = listaFattureArchiviate.Union(listaFattureInviate).Union(listaFattureDaInviare).ToList
        '' ''    'Me.FattureElettroniche = fatture.GetViewFattureDaConservare(Me.GetFiltro, cmbStatoFattura.SelectedValue).OrderBy(Function(c) c.MessaggioSdI.DataRicezioneInvio).ToList
        '' ''    fatture.Dispose()
        '' ''End If
        '' ''Me.FattureElettronicheGridView.DataSource = Me.FattureElettroniche
    End Sub

    Private Function GetDocumentiDaConservare(ByVal filtro As FiltroFatturaConservazione) As List(Of FatturaConservazione)

        Dim documenti As New ParsecPro.FatturaElettronicaRepository

        Dim messagiSDI As New ParsecPro.MessaggioSdIRepository(documenti.Context)

        Dim documentiConservati As New ParsecPro.DocumentoConservazioneRepository(documenti.Context)

        Dim istanze As New ParsecCommon.RepositoryBase(Of ParsecPro.IstanzaWKF)(documenti.Context)

        Dim view = (From fattura In documenti.GetQuery.Where(Function(w) w.NumeroProtocollo <> 0)
                    Join messaggioSDI In messagiSDI.GetQuery On messaggioSDI.Id Equals fattura.IdMessaggioSdI
                    Group Join documentoConservato In documentiConservati.GetQuery
                    On documentoConservato.Id Equals messaggioSDI.IdDocumentoWS
                    Into elencoDocumentiConservati = Group
                    From documentoConservato In elencoDocumentiConservati.DefaultIfEmpty
                    Group Join istanza In istanze.GetQuery.Where(Function(c) c.IdModulo = ParsecAdmin.TipoModulo.PRO)
                    On fattura.IdRegistrazione Equals istanza.IdDocumento
                    Into elencoIstanze = Group
                    From istanza In elencoIstanze.DefaultIfEmpty()
                    Where ((Not istanza Is Nothing And istanza.IdStato = 3 And (fattura.IdStato = CInt(ParsecPro.StatoFattura.Accettata) Or fattura.IdStato = CInt(ParsecPro.StatoFattura.Contabilizzata) Or fattura.IdStato = CInt(ParsecPro.StatoFattura.Convervata) And Not fattura.IdRegistrazione Is Nothing)) Or (istanza Is Nothing And ((fattura.IdStato = CInt(ParsecPro.StatoFattura.Accettata) Or fattura.IdStato = CInt(ParsecPro.StatoFattura.Contabilizzata) Or fattura.IdStato = CInt(ParsecPro.StatoFattura.Convervata)) And Not fattura.IdRegistrazione Is Nothing))) _
                    Let IdPacchettoVersamento = If(documentoConservato Is Nothing, Nothing, documentoConservato.IdPacchettoVersamento)
                    Select fattura, IdPacchettoVersamento).Distinct
        'Where ((Not istanza Is Nothing And istanza.IdStato = 3 And (fattura.IdStato = CInt(ParsecPro.StatoFattura.Accettata) Or fattura.IdStato = CInt(ParsecPro.StatoFattura.Contabilizzata) Or fattura.IdStato = CInt(ParsecPro.StatoFattura.Convervata) And Not fattura.IdRegistrazione Is Nothing)) Or (istanza Is Nothing And ((fattura.IdStato = CInt(ParsecPro.StatoFattura.Accettata) Or fattura.IdStato = CInt(ParsecPro.StatoFattura.Contabilizzata) Or fattura.IdStato = CInt(ParsecPro.StatoFattura.Convervata)) And Not fattura.IdRegistrazione Is Nothing))) _

        'Dim conta1 = view.Where(Function(w) w.fattura.NumeroProtocollo = 1 And w.fattura.AnnoProtocollo = 2016)
        'Dim view2 = view.Distinct
        'Dim view3 = view.Except(view2)
        'Dim s = CType(view, ObjectQuery).ToTraceString

        'Dim a = view.Where(Function(w) w.fattura.NumeroProtocollo = 9831).ToList
        'SOLO INVIATI
        If filtro.Inviati AndAlso Not filtro.DaInviare And Not filtro.Archiviati Then
            view = view.Where(Function(c) c.fattura.MessaggioSdI.IdDocumentoWS.HasValue And Not c.IdPacchettoVersamento.HasValue)

            'SOLO DA INVIARE
        ElseIf Not filtro.Inviati AndAlso filtro.DaInviare And Not filtro.Archiviati Then
            view = view.Where(Function(c) Not c.fattura.MessaggioSdI.IdDocumentoWS.HasValue)

            'INVIATI + DA INVIARE
        ElseIf filtro.Inviati AndAlso filtro.DaInviare And Not filtro.Archiviati Then
            view = view.Where(Function(c) Not c.fattura.MessaggioSdI.IdDocumentoWS.HasValue Or c.fattura.MessaggioSdI.IdDocumentoWS.HasValue And Not c.IdPacchettoVersamento.HasValue)

            'SOLO ARCHIVIARE
        ElseIf filtro.Archiviati AndAlso Not filtro.Inviati AndAlso Not filtro.DaInviare Then
            view = view.Where(Function(c) c.IdPacchettoVersamento.HasValue)

            'INVIATI + ARCHIVIARE
        ElseIf filtro.Archiviati AndAlso filtro.Inviati AndAlso Not filtro.DaInviare Then
            view = view.Where(Function(c) c.IdPacchettoVersamento.HasValue Or c.fattura.MessaggioSdI.IdDocumentoWS.HasValue)

            'DA INVIARE + ARCHIVIARE
        ElseIf filtro.Archiviati AndAlso Not filtro.Inviati AndAlso filtro.DaInviare Then
            view = view.Where(Function(c) c.IdPacchettoVersamento.HasValue Or Not c.fattura.MessaggioSdI.IdDocumentoWS.HasValue)

            'TUTTI
        ElseIf filtro.Inviati AndAlso filtro.DaInviare AndAlso filtro.Archiviati Then
            view = view.Where(Function(c) Not c.fattura.MessaggioSdI.IdDocumentoWS.HasValue Or c.fattura.MessaggioSdI.IdDocumentoWS.HasValue Or c.IdPacchettoVersamento.HasValue)
        End If


        If filtro.DataInizio.HasValue Then
            Dim d As Date = filtro.DataInizio.Value
            Dim newDate As Date = New Date(d.Year, d.Month, d.Day, 0, 0, 0, 0)
            view = view.Where(Function(c) c.fattura.MessaggioSdI.DataRicezioneInvio >= newDate)
        End If

        If filtro.DataFine.HasValue Then
            Dim d As Date = filtro.DataFine.Value
            Dim newDate As Date = New Date(d.Year, d.Month, d.Day, 23, 59, 59, 999)
            view = view.Where(Function(c) c.fattura.MessaggioSdI.DataRicezioneInvio <= newDate)
        End If

        Dim res = From c In view.AsEnumerable.Select(Function(c) New FatturaConservazione With {
                                                         .Id = c.fattura.Id,
                                                        .AnnoProtocollo = c.fattura.AnnoProtocollo,
                                                         .DataRicezioneInvio = c.fattura.MessaggioSdI.DataRicezioneInvio,
                                                         .DenominazioneFornitore = c.fattura.DenominazioneFornitore,
                                                         .IdDocumentoWS = c.fattura.MessaggioSdI.IdDocumentoWS,
                                                         .IdentificativoSdI = c.fattura.IdentificativoSdI,
                                                        .IdPacchettoVersamento = c.IdPacchettoVersamento,
                                                         .NomeFile = c.fattura.MessaggioSdI.Nomefile,
                                                         .NumeroProtocollo = c.fattura.NumeroProtocollo,
                                                         .Oggetto = c.fattura.Oggetto,
                                                         .PartitaIvaFornitore = c.fattura.PartitaIvaFornitore,
                                                         .PercorsoRelativo = c.fattura.MessaggioSdI.PercorsoRelativo,
                                                         .VersioneFattura = c.fattura.VersioneFattura
                                                    })

        Return res.ToList
    End Function

    Protected Sub FattureElettronicheGridView_ItemCommand(sender As Object, e As Telerik.Web.UI.GridCommandEventArgs) Handles FattureElettronicheGridView.ItemCommand
        If e.CommandName = Telerik.Web.UI.RadGrid.ExpandCollapseCommandName AndAlso Not e.Item.Expanded Then
            Dim parentItem As Telerik.Web.UI.GridDataItem = CType(e.Item, Telerik.Web.UI.GridDataItem)
            Dim innerGrid As Telerik.Web.UI.RadGrid = CType(parentItem.ChildItem.FindControl("NotificheGridView"), Telerik.Web.UI.RadGrid)
            innerGrid.Rebind()
        ElseIf e.CommandName = "Anteprima" Then
            Me.AnteprimaFattura(e.Item)
        ElseIf e.CommandName = "SbloccoFattura" Then
            Me.SbloccaFattura(e.Item)
        End If
    End Sub

    Protected Sub DocumentiGridView_ItemCommand(ByVal sender As Object, ByVal e As Telerik.Web.UI.GridCommandEventArgs) Handles DocumentiGridView.ItemCommand
        If e.CommandName = "Preview" Then
            Me.DownloadFileFattura(e.Item)
        End If
    End Sub

    Private Sub DownloadFileFattura(ByVal item As Telerik.Web.UI.GridDataItem)
        Dim filename As String = item.OwnerTableView.DataKeyValues(item.ItemIndex)("Nomefile")
        Dim allegato As ParsecPro.AllegatoFattura = Me.AllegatiFattura.Where(Function(c) c.Nomefile = filename).FirstOrDefault
        If Not allegato Is Nothing Then
            Dim estensione As String = IO.Path.GetExtension(filename)
            Dim ht As New Hashtable
            ht.Add("Content", allegato.Content)
            ht.Add("Extension", estensione)
            Session("AttachmentFullName") = ht
            Dim pageUrl As String = "~/UI/Amministrazione/pages/user/DownloadPage.aspx"
            If estensione.ToLower = ".pdf" Then
                ParsecUtility.Utility.ShowPopup(pageUrl, 800, 600, Nothing, False)
            Else
                ParsecUtility.Utility.PageReload(pageUrl, False)
            End If
        End If
    End Sub

    Private Function GetAllegatiFattura(ByVal pathFattura As String) As List(Of ParsecPro.AllegatoFattura)

        Dim el As XElement = Nothing
        Dim ms As IO.MemoryStream = Nothing

        If pathFattura.ToLower.EndsWith(".p7m") Then
            Dim buffer As Byte() = IO.File.ReadAllBytes(pathFattura)
            Dim signedCms As New System.Security.Cryptography.Pkcs.SignedCms
            'SE IL CONTENUTO DEL FILE P7M E' CODIFICATO IN BASE64 LO DECODIFICO
            Try
                buffer = System.Convert.FromBase64String(System.Text.ASCIIEncoding.Default.GetString(buffer))
            Catch ex As Exception
                'NIENTE
            End Try

            signedCms.Decode(buffer)

            ms = ParsecUtility.Utility.FixVersioneXml(signedCms.ContentInfo.Content)

        Else
            Dim bytes As Byte() = IO.File.ReadAllBytes(pathFattura)
            ms = ParsecUtility.Utility.FixVersioneXml(bytes)

        End If

        el = XElement.Load(ms)

        Dim listaAllegatiFattura As New List(Of ParsecPro.AllegatoFattura)

        Dim header = el.Element("FatturaElettronicaHeader")

        'SE E' UNA FATTURA ELETTRONICA
        If Not header Is Nothing Then
            Dim oggetto As String = String.Empty
            Dim listaBody = el.Elements("FatturaElettronicaBody")
            Dim i As Integer = 0
            For Each body In listaBody
                i += 1
                oggetto = String.Empty

                Dim datiGeneraliDocumento = body.Element("DatiGenerali").Element("DatiGeneraliDocumento")
                Dim numerofattura = datiGeneraliDocumento.Element("Numero").Value

                Dim descrizioneTipoDocumento As String = "Fattura"
                If Not datiGeneraliDocumento.Element("TipoDocumento") Is Nothing Then
                    Dim tipoDocumento = datiGeneraliDocumento.Element("TipoDocumento").Value
                    Select Case tipoDocumento
                        Case "TD01"
                            descrizioneTipoDocumento = "Fattura"
                        Case "TD02"
                            descrizioneTipoDocumento = "Acconto/anticipo su fattura"
                        Case "TD03"
                            descrizioneTipoDocumento = "Acconto/anticipo su parcella"
                        Case "TD04"
                            descrizioneTipoDocumento = "Nota di credito"
                        Case "TD05"
                            descrizioneTipoDocumento = "Nota di debito"
                        Case "TD06"
                            descrizioneTipoDocumento = "Parcella"
                    End Select
                End If


                oggetto &= descrizioneTipoDocumento & " n. " & numerofattura.ToString
                Dim datafattura = Date.Parse(datiGeneraliDocumento.Element("Data").Value).ToShortDateString

                oggetto &= " del " & datafattura


                Dim allegati = body.Elements("Allegati")
                Dim allegatoFattura As ParsecPro.AllegatoFattura = Nothing
                For Each allegato In allegati
                    Dim estensione As String = String.Empty
                    If Not allegato.Element("FormatoAttachment") Is Nothing Then
                        estensione = allegato.Element("FormatoAttachment")
                    End If

                    'GESTIONE ALGORITMO DI COMPRESSIONE
                    If Not allegato.Element("AlgoritmoCompressione") Is Nothing Then
                        estensione = allegato.Element("AlgoritmoCompressione").Value.ToLower
                    End If

                    allegatoFattura = New ParsecPro.AllegatoFattura
                    allegatoFattura.Id = Guid.NewGuid.ToString
                    allegatoFattura.Posizione = i


                    If Not String.IsNullOrEmpty(estensione) Then
                        allegatoFattura.Nomefile = allegato.Element("NomeAttachment").Value & "." & estensione
                    Else
                        allegatoFattura.Nomefile = allegato.Element("NomeAttachment").Value
                    End If

                    allegatoFattura.Estremi = oggetto
                    allegatoFattura.Content = System.Convert.FromBase64String(allegato.Element("Attachment"))

                    listaAllegatiFattura.Add(allegatoFattura)
                Next

            Next

        End If

        Return listaAllegatiFattura

    End Function

    Protected Sub FattureElettronicheGridView_ItemCreated(ByVal sender As Object, ByVal e As Telerik.Web.UI.GridItemEventArgs) Handles FattureElettronicheGridView.ItemCreated

        If TypeOf e.Item Is GridDataItem Then
            AddHandler e.Item.PreRender, AddressOf FattureElettronicheGridView_ItemPreRender
        End If

        'If TypeOf e.Item Is GridFilteringItem Then
        '    e.Item.Style.Add("position", "relative")
        '    e.Item.Style.Add("top", "expression(this.offsetParent.scrollTop)")
        '    e.Item.Style.Add("z-index", "99")
        'End If

        'If TypeOf e.Item Is GridHeaderItem Then
        '    e.Item.Style.Add("position", "relative")
        '    e.Item.Style.Add("top", "expression(this.offsetParent.scrollTop)")
        '    e.Item.Style.Add("z-index", "99")
        '    e.Item.Style.Add("background-color", "White")
        'End If

        If TypeOf e.Item Is Telerik.Web.UI.GridPagerItem Then
            Dim pageSizeComboBox As RadComboBox = CType(e.Item.FindControl("PageSizeComboBox"), RadComboBox)
            pageSizeComboBox.Visible = False
            Dim changePageSizelbl As Label = CType(e.Item.FindControl("ChangePageSizeLabel"), Label)
            changePageSizelbl.Visible = False

        End If

    End Sub

    Protected Sub FattureElettronicheGridView_PreRender(ByVal sender As Object, ByVal e As EventArgs) Handles FattureElettronicheGridView.PreRender
        Dim headerItem As GridHeaderItem = CType(Me.FattureElettronicheGridView.MasterTableView.GetItems(GridItemType.Header)(0), GridHeaderItem)
        Dim count = Me.CheckedRowCount
        If count > 0 Then
            CType(headerItem.FindControl("SelectAllCheckBox"), CheckBox).Checked = (Me.FattureElettronicheGridView.SelectedItems.Count = count)
        End If
        CType(headerItem.FindControl("SelectAllCheckBox"), CheckBox).Enabled = Me.FattureElettronicheGridView.Items.Count > 0
        Me.CheckedRowCount = 0
    End Sub

    Protected Sub FattureElettronicheGridView_ItemPreRender(ByVal sender As Object, ByVal e As EventArgs)
        CType(CType(sender, GridDataItem)("CheckBoxTemplateColumn").FindControl("SelectCheckBox"), CheckBox).Checked = CType(sender, GridDataItem).Selected
    End Sub

    Protected Sub FattureElettronicheGridView_ItemDataBound(sender As Object, e As Telerik.Web.UI.GridItemEventArgs) Handles FattureElettronicheGridView.ItemDataBound

        Dim sbloccoButton As ImageButton = Nothing
        Dim statoButton As ImageButton = Nothing

        If TypeOf e.Item Is Telerik.Web.UI.GridDataItem Then
            Dim dataItem As Telerik.Web.UI.GridDataItem = e.Item

            Dim documento As FatturaConservazione = CType(e.Item.DataItem, FatturaConservazione)

            If TypeOf dataItem("SbloccoFattura").Controls(0) Is ImageButton Then
                statoButton = CType(dataItem("StatoFattura").Controls(0), ImageButton)
                sbloccoButton = CType(dataItem("SbloccoFattura").Controls(0), ImageButton)

                statoButton.Enabled = False


                If Not documento.IdDocumentoWS.HasValue Then

                    sbloccoButton.ImageUrl = "~\images\vuoto.png"
                    sbloccoButton.Attributes.Add("onclick", "return false;")
                    sbloccoButton.ToolTip = "Fattura da inviare al Modulo Archivio."

                    statoButton.ImageUrl = "~\images\pBlue16.png"
                    statoButton.ToolTip = "Fattura da inviare al Modulo Archivio."

                    Me.CheckedRowCount += 1
                Else

                    Dim chk As CheckBox = CType(dataItem("CheckBoxTemplateColumn").FindControl("SelectCheckBox"), CheckBox)
                    chk.Enabled = False



                    If documento.IdPacchettoVersamento.HasValue Then
                        sbloccoButton.ImageUrl = "~\images\Lock_16.png"
                        sbloccoButton.Attributes.Add("onclick", "return false;")
                        sbloccoButton.ToolTip = "Fattura già impacchettata: impossibile sbloccarlo."

                        statoButton.ImageUrl = "~\images\pRosso16.png"
                        statoButton.ToolTip = "Fattura già inviata al Modulo Archivio ed Impacchettata."
                    Else
                        sbloccoButton.ImageUrl = "~\images\unLock_16.png"
                        sbloccoButton.ToolTip = "Sblocca Fattura."

                        statoButton.ImageUrl = "~\images\pVerde16.png"
                        statoButton.ToolTip = "Fattura già inviata al Modulo Archivio e non Impacchettata."
                    End If


                End If

            End If

        End If
    End Sub

    Protected Sub ToggleRowSelection(ByVal sender As Object, ByVal e As EventArgs)
        CType(CType(sender, CheckBox).NamingContainer, GridItem).Selected = CType(sender, CheckBox).Checked
    End Sub

    Protected Sub ToggleSelectedState(ByVal sender As Object, ByVal e As EventArgs)
        Dim headerCheckBox As CheckBox = CType(sender, CheckBox)
        For Each dataItem As GridDataItem In Me.FattureElettronicheGridView.MasterTableView.Items
            Dim chk As CheckBox = CType(dataItem.FindControl("SelectCheckBox"), CheckBox)
            If chk.Enabled Then
                chk.Checked = headerCheckBox.Checked
                dataItem.Selected = headerCheckBox.Checked
            End If
        Next
    End Sub

#End Region

#Region "AZIONI PANNELLO FILTRO"

    Private Function GetFiltro() As FiltroFatturaConservazione
        Dim filtro As New FiltroFatturaConservazione
        filtro.Inviati = Me.chkInviate.Checked
        filtro.DaInviare = Me.chkDaInviare.Checked
        filtro.Archiviati = Me.chkArchiviate.Checked

        filtro.DataInizio = Me.DataInvioInizioTextBox.SelectedDate
        filtro.DataFine = Me.DataInvioFineTextBox.SelectedDate

        Return filtro
    End Function

    Private Function GetAnnoEsercizio() As Integer
        Dim annoEsercizio As Integer = Now.Year
        Dim parametri As New ParsecAdmin.ParametriRepository
        Dim parametro As ParsecAdmin.Parametri = parametri.GetByName("AnnoCorrente", ParsecAdmin.TipoModulo.ATT)
        If Not parametro Is Nothing Then
            annoEsercizio = CInt(parametro.Valore)
        End If
        parametri.Dispose()
        Return annoEsercizio
    End Function

    Private Sub ResettaFiltro()

        For Each col As GridColumn In Me.FattureElettronicheGridView.MasterTableView.Columns
            col.CurrentFilterValue = String.Empty
        Next
        Me.FattureElettronicheGridView.MasterTableView.FilterExpression = String.Empty

        chkDaInviare.Checked = True
        chkArchiviate.Checked = False
        chkInviate.Checked = False

        Me.DataInvioInizioTextBox.SelectedDate = New Date(Me.GetAnnoEsercizio, 1, 1)
        Me.DataInvioFineTextBox.SelectedDate = Now
    End Sub

    Private Sub AggiornaGriglia()
        Me.FattureElettroniche = Nothing
        Me.FattureElettronicheGridView.Rebind()
    End Sub

    Protected Sub FiltraImageButton_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles FiltraImageButton.Click
        Me.AggiornaGriglia()
    End Sub

    Protected Sub AnnullaFiltroImageButton_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles AnnullaFiltroImageButton.Click
        Me.ResettaFiltro()
        Me.AggiornaGriglia()
    End Sub

#End Region

#Region "METODI PRIVATI"

    Private Function GetlimiteNumeroPagineRicerca() As Integer
        Dim limiteNumeroPAgine As Integer = -1
        Dim parametri As New ParsecAdmin.ParametriRepository
        Dim parametro As ParsecAdmin.Parametri = parametri.GetByName("limiteNumeroPaginazioneConservazione", ParsecAdmin.TipoModulo.CSZ)
        If Not parametro Is Nothing Then
            limiteNumeroPAgine = CInt(parametro.Valore)
        End If
        parametri.Dispose()
        Return limiteNumeroPAgine
    End Function

    Protected Sub NoPaging_Click(sender As Object, e As System.EventArgs) Handles NoPaging.Click
        Dim limitePagine = GetlimiteNumeroPagineRicerca()
        If (Me.FattureElettronicheGridView.PageCount > limitePagine) Then
            ParsecUtility.Utility.MessageBox("Il numero di record risultante dalla ricerca è eccessivo: si prega di raffinare la ricerca!", False)
            Exit Sub
        End If

        Me.FattureElettronicheGridView.AllowPaging = Not Me.FattureElettronicheGridView.AllowPaging
        If Me.FattureElettronicheGridView.AllowPaging Then
            Me.NoPaging.Text = "Non Paginare"
            Me.NoPaging.Icon.PrimaryIconUrl = "~/images/Next.png"
        Else
            Me.NoPaging.Text = "Paginare"
            Me.NoPaging.Icon.PrimaryIconUrl = "~/images/Previous.png"
        End If
        Me.FattureElettronicheGridView.Rebind()
    End Sub

    Private Sub SbloccaFattura(ByVal item As Telerik.Web.UI.GridDataItem)

        Me.AllegatiFattura.Clear()
        Me.HtmlFattura = Nothing

        Dim cliente As ParsecAdmin.Cliente = ParsecUtility.Applicazione.ClienteCorrente
        Dim id As Integer = item.OwnerTableView.DataKeyValues(item.ItemIndex)("Id")
        Dim fatturaRepository As New FatturaElettronicaRepository
        Dim fattura As ParsecPro.FatturaElettronica = fatturaRepository.GetById(id)

        Try
            Dim wsConservazione As New wsConservazione.wsConservazione
            Dim soapCancellaDocumentoRequest = New wsConservazione.SoapCancellaDocumentoRequest
            soapCancellaDocumentoRequest.codiceLicenza = cliente.CodLicenza
            soapCancellaDocumentoRequest.documentoFiltro = New wsConservazione.DocumentoBaseConservazioneFiltro
            soapCancellaDocumentoRequest.documentoFiltro.idDocumento = fattura.MessaggioSdI.IdDocumentoWS
            Dim soapCancellazioneDocumentoResponse = wsConservazione.cancellaDocumento(soapCancellaDocumentoRequest)
        Catch ex As Exception
            'NIENTE
        End Try

        fattura.MessaggioSdI.IdDocumentoWS = Nothing
        fattura.IdStato = StatoFattura.Contabilizzata
        fatturaRepository.SaveChanges()
        fatturaRepository.Dispose()
        Me.infoOperazioneHidden.Value = "Sblocco Fattura avvenuto con successo!"
        Me.AggiornaGriglia()

        'Dim id As Integer = item.OwnerTableView.DataKeyValues(item.ItemIndex)("Id")
        'Dim fatturaRepository As New FatturaElettronicaRepository
        'Dim fattura As FatturaElettronica = fatturaRepository.GetById(id)

        'Try
        '    Dim wsConservazione As New wsConservazione.wsConservazione

        '    Dim soapGetDocumentoRequest As New wsConservazione.SoapGetDocumentoRequest
        '    soapGetDocumentoRequest.codiceLicenza = Me.Cliente.CodLicenza
        '    Dim wsFiltroDocumento As New wsConservazione.DocumentoBaseConservazioneFiltro
        '    wsFiltroDocumento.idDocumento = fattura.MessaggioSdI.IdDocumentoWS
        '    soapGetDocumentoRequest.documentoFiltro = wsFiltroDocumento

        '    Dim soapDocumentoBaseResponse = wsConservazione.getDocumento(soapGetDocumentoRequest)
        '    If (soapDocumentoBaseResponse.messaggioErrore = "") Then
        '        If (soapDocumentoBaseResponse.ListaDocumentiBase(0).idPacchettoVersamento.HasValue) Then
        '            Throw New Exception("Fattura già impacchettata: impossibile cancellarla: " & soapDocumentoBaseResponse.messaggioErrore)
        '        Else
        '            Dim soapCancellaDocumentoRequest = New wsConservazione.SoapCancellaDocumentoRequest
        '            soapCancellaDocumentoRequest.codiceLicenza = Me.Cliente.CodLicenza
        '            soapCancellaDocumentoRequest.documentoFiltro = wsFiltroDocumento
        '            Dim soapCancellazioneDocumentoResponse = wsConservazione.cancellaDocumento(soapCancellaDocumentoRequest)
        '            If (soapCancellazioneDocumentoResponse.messaggioErrore <> "") Then
        '                Throw New Exception(soapDocumentoBaseResponse.messaggioErrore)
        '            Else
        '                fattura.MessaggioSdI.IdDocumentoWS = Nothing
        '                fatturaRepository.Save(fattura)
        '                Me.infoOperazioneHidden.Value = "Sblocco Fattura avvenuto con successo!"
        '                Me.AggiornaGriglia()
        '            End If
        '        End If
        '    Else
        '        fattura.MessaggioSdI.IdDocumentoWS = Nothing
        '        fatturaRepository.Save(fattura)
        '        Me.AggiornaGriglia()
        '        Throw New Exception(soapDocumentoBaseResponse.messaggioErrore)
        '    End If
        '    fatturaRepository.Dispose()
        'Catch ex As Exception
        '    ParsecUtility.Utility.MessageBox(ex.Message, False)
        '    fatturaRepository.Dispose()
        'End Try

    End Sub

    Private Sub AnteprimaFattura(ByVal item As Telerik.Web.UI.GridDataItem)

        Me.AllegatiFattura.Clear()
        Me.HtmlFattura = Nothing

        Dim id As Integer = item.OwnerTableView.DataKeyValues(item.ItemIndex)("Id")
        Dim fE As FatturaElettronica = (New FatturaElettronicaRepository).GetById(id)

        Dim PathFatturaElettronica As String
        Dim PathModelloFatturaElettronica As String = ParsecAdmin.WebConfigSettings.GetKey("ModelloFatturaElettronica")

        Dim PathRelativoFatturaElettronica As String
        Dim NomeFileFatturaElettronica As String = fE.MessaggioSdI.Nomefile
        Dim VersioneFatturaElettronica As String = fE.VersioneFattura

        If fE.IdStato = StatoFattura.Ricevuta Then
            PathRelativoFatturaElettronica = String.Empty
            PathFatturaElettronica = ParsecAdmin.WebConfigSettings.GetKey("PathDocumentiTemp")
        Else
            PathFatturaElettronica = ParsecAdmin.WebConfigSettings.GetKey("PathFattureElettroniche")
            PathRelativoFatturaElettronica = fE.MessaggioSdI.PercorsoRelativo
        End If

        Dim path As String = PathFatturaElettronica & PathRelativoFatturaElettronica & NomeFileFatturaElettronica

        Dim FU As New ParsecUtility.FatturaUtility
        Try


            Dim listaAllegatiFattura = Me.GetAllegatiFattura(path)
            Me.AllegatiFattura = listaAllegatiFattura


            If path.ToLower.EndsWith(".p7m") Then

                Dim buffer As Byte() = IO.File.ReadAllBytes(path)
                Dim signedCms As New System.Security.Cryptography.Pkcs.SignedCms
                'SE IL CONTENUTO DEL FILE P7M E' CODIFICATO IN BASE64 LO DECODIFICO
                Try
                    buffer = System.Convert.FromBase64String(System.Text.ASCIIEncoding.Default.GetString(buffer))
                Catch ex As Exception
                    'NIENTE
                End Try

                signedCms.Decode(buffer)
                Me.HtmlFattura = FU.TrasformaFatturaInHtmlString(PathModelloFatturaElettronica, signedCms.ContentInfo.Content, VersioneFatturaElettronica)
            Else
                Me.HtmlFattura = FU.TrasformaFatturaInHtmlString(PathModelloFatturaElettronica, PathFatturaElettronica + PathRelativoFatturaElettronica, NomeFileFatturaElettronica, VersioneFatturaElettronica)
            End If

            Dim script As New Text.StringBuilder
            script.AppendLine("<script language='javascript'>")
            script.AppendLine("ShowPanel();hide=false;")
            script.AppendLine("</script>")
            ParsecUtility.Utility.RegisterScript(script, False)
            Me.GrigliaAllegatiPanel.Visible = True


            Me.DocumentiGridView.DataSource = Me.AllegatiFattura
            Me.DocumentiGridView.DataBind()

        Catch ex As Exception
            If IO.File.Exists(path) Then
                Dim s = IO.File.ReadAllText(path)
                Me.HtmlFattura = "<HR><span style='color:red;font-size:30px'>ATTENZIONE IL FILE NON E' VALIDO</span><BR><HR><BR>" & ParsecUtility.Utility.SpecialXmlEscape(s)

                Me.DocumentiGridView.DataSource = Me.AllegatiFattura
                Me.DocumentiGridView.DataBind()

                Dim script As New Text.StringBuilder
                script.AppendLine("<script language='javascript'>")
                script.AppendLine("ShowPanel();hide=false;")
                script.AppendLine("</script>")
                ParsecUtility.Utility.RegisterScript(script, False)

            Else
                ParsecUtility.Utility.MessageBox(ex.Message.Replace("\", "/"), False)
            End If
        End Try

    End Sub

    Private Shared Function FixVersioneXml(ByVal input As Byte()) As IO.MemoryStream
        Dim enc As New System.Text.UTF8Encoding
        Dim content As String = enc.GetString(input)
        Dim startPos As Integer = content.IndexOf("<?xml", StringComparison.OrdinalIgnoreCase) + 5
        Dim endPos As Integer = content.IndexOf("?>", startPos)
        If endPos <> -1 Then
            Dim header As String = content.Substring(startPos, endPos - startPos)

            Dim versione As String = "1.1"
            Dim v = header.IndexOf("version=")
            If v <> -1 Then
                versione = header.Substring(v + 9, 3)
            End If
            header = header.Replace("version=" & Chr(34) & versione & Chr(34) & "", "version=""1.0""")
            content = String.Format("{0}{1}{2}", content.Substring(0, startPos), header, content.Substring(endPos))
        End If
        Dim buffer As Byte() = enc.GetBytes(content)
        Dim ms As New IO.MemoryStream(buffer)
        Return ms
    End Function


    Protected Sub EsportaInExcelImageButton_Click(sender As Object, e As System.Web.UI.ImageClickEventArgs) Handles EsportaInExcelImageButton.Click

        Me.FattureElettronicheGridView.AllowPaging = False
        Me.FattureElettronicheGridView.Rebind()

        If Me.FattureElettronicheGridView.MasterTableView.Items.Count = 0 Then
            ParsecUtility.Utility.MessageBox("Non ci sono fatture elettroniche." & vbCrLf & "Impossibile eseguire l'esportazione!", False)
            Exit Sub
        End If

        Dim utente As ParsecAdmin.Utente = ParsecUtility.Applicazione.UtenteCorrente
        Dim exportFilename As String = String.Format("FattureElettronichePassive_UT{0}_AL_{1}.xls", utente.Id, Now.ToString("ddMM_yyyy_hhmmss"))

        Dim pathExport As String = System.Configuration.ConfigurationManager.AppSettings("PathDocumentiTemp")
        Dim fullPathExport As String = pathExport & exportFilename

        Dim swExport As New IO.StreamWriter(fullPathExport, False, System.Text.Encoding.Default)
        Dim line As New StringBuilder

        line.Append("N. PROT." & vbTab)
        line.Append("ANNO PROT." & vbTab)
        line.Append("FORNITORE" & vbTab)
        'line.Append("DESTINATARIO" & vbTab)
        line.Append("IDENT. SDI" & vbTab)
        line.Append("ESTREMI FATTURA" & vbTab)
        line.Append("PARTITA IVA" & vbTab)
        line.Append("RICEZIONE" & vbTab)
        'line.Append("SCADENZA" & vbTab)
        'line.Append("RESIDUO" & vbTab)



        swExport.WriteLine(line.ToString)
        line.Clear()

        Dim f As FatturaConservazione = Nothing
        For Each item As GridDataItem In Me.FattureElettronicheGridView.MasterTableView.Items
            Dim idSelezionato As Integer = item.OwnerTableView.DataKeyValues(item.ItemIndex)("Id")
            'Dim u = item.GetDataKeyValue("Id").ToString

            f = Me.FattureElettroniche.Where(Function(c) c.Id = idSelezionato).FirstOrDefault

            line.Append(If(Not f.NumeroProtocollo Is Nothing, f.NumeroProtocollo.ToString, "") & vbTab)
            line.Append(If(f.AnnoProtocollo > 0, f.AnnoProtocollo.ToString, "") & vbTab)
            line.Append(If(Not String.IsNullOrEmpty(f.DenominazioneFornitore), f.DenominazioneFornitore, "") & vbTab)
            'line.Append(If(Not String.IsNullOrEmpty(f.DenominazioneDestinatario), f.DenominazioneDestinatario, "") & vbTab)
            line.Append(If(Not String.IsNullOrEmpty(f.IdentificativoSdI), f.IdentificativoSdI, "") & vbTab)
            line.Append(If(Not String.IsNullOrEmpty(f.Oggetto), f.Oggetto, "") & vbTab)
            line.Append(If(Not String.IsNullOrEmpty(f.PartitaIvaFornitore), f.PartitaIvaFornitore, "") & vbTab)

            line.Append(If(Not String.IsNullOrEmpty(f.DataRicezioneInvio), f.DataRicezioneInvio.ToShortDateString, "") & vbTab)


            'Dim stato As ParsecPro.StatoFattura = CType(f.IdStato, ParsecPro.StatoFattura)

            'If stato = StatoFattura.Ricevuta OrElse stato = StatoFattura.Protocollata Then
            '    Dim dataScadenza = f.MessaggioSdI.DataRicezioneInvio.AddDays(14).ToShortDateString()
            '    Dim residuo = (f.MessaggioSdI.DataRicezioneInvio.AddDays(16) - Now).Days
            '    line.Append(dataScadenza & vbTab)
            '    line.Append(residuo & vbTab)
            'Else
            '    line.Append("" & vbTab)
            '    line.Append("" & vbTab)
            'End If

            swExport.WriteLine(line.ToString)
            line.Clear()

        Next

        swExport.Close()

        Session("AttachmentFullName") = fullPathExport

        Dim pageUrl As String = "~/UI/Amministrazione/pages/user/ExportExcelPage.aspx"
        ParsecUtility.Utility.PageReload(pageUrl, False)

        FattureElettronicheGridView.AllowPaging = True
        FattureElettronicheGridView.Rebind()


    End Sub

#End Region

#Region "CONSERVAZIONE MASSIVA"

    Private Function isAlive() As Boolean
        Try
            Dim wsConservazione As New wsConservazione.wsConservazione
            Return wsConservazione.isAlive
        Catch ex As Exception
            Return False
        End Try
    End Function

    Protected Sub ConservaFattureImageButton_Click(sender As Object, e As System.Web.UI.ImageClickEventArgs) Handles ConservaFattureImageButton.Click
        Dim sb As New StringBuilder

        Dim utenteCollegato As ParsecAdmin.Utente = CType(ParsecUtility.Applicazione.UtenteCorrente, ParsecAdmin.Utente)

        Dim fatture As New ParsecPro.FatturaElettronicaRepository
        Dim registrazioni As New ParsecPro.RegistrazioniRepository

        Dim fattura As ParsecPro.FatturaElettronica = Nothing
        Dim registrazione As ParsecPro.Registrazione = Nothing

        Dim count = Me.FattureElettronicheGridView.SelectedItems.Count
        Dim context = RadProgressContext.Current
        context.PrimaryTotal = count.ToString
        Dim i As Integer = 0

        Dim wsConservazioneSoap As New wsConservazione.wsConservazione
        If Not isAlive() Then
            sb.AppendLine("Connessione col Modulo Archivio non trovata.")
            Exit Sub
        End If

        'la connessione c'è

        Dim getEnteSoapRequest As New wsConservazione.SoapGetEnteConservatoreRequest
        getEnteSoapRequest.codiceLicenza = Cliente.CodLicenza
        Dim enteConservatoreAttivo = wsConservazioneSoap.getEnteConservatoreAttivo(getEnteSoapRequest)
        If (enteConservatoreAttivo.messaggioErrore <> String.Empty) Then
            ParsecUtility.Utility.MessageBox(enteConservatoreAttivo.messaggioErrore, False)
            Exit Sub
        End If


        For Each selectedItem As GridDataItem In Me.FattureElettronicheGridView.SelectedItems
            i += 1
            context.PrimaryValue = i.ToString

            Dim percentCompleted = CInt((0.5F + ((100.0F * i) / count)))

            context.PrimaryPercent = percentCompleted.ToString

            If Not Response.IsClientConnected Then
                Exit For
            End If

            Dim identificativoSdI = selectedItem("IdentificativoSdI").Text
            Try

                Dim idSelezionato As Integer = selectedItem.OwnerTableView.DataKeyValues(selectedItem.ItemIndex)("Id")
                'ricerco la fattura
                fattura = fatture.Where(Function(c) c.Id = idSelezionato).FirstOrDefault
                'ricerco la registrazione di protocollo
                registrazione = registrazioni.Where(Function(c) c.Id = fattura.IdRegistrazione).FirstOrDefault

                If Not fattura Is Nothing Then

                    Dim nomefile As String = fattura.MessaggioSdI.Nomefile
                    Dim localPath As String = ParsecAdmin.WebConfigSettings.GetKey("PathFattureElettroniche") & fattura.MessaggioSdI.PercorsoRelativo & nomefile

                    If IO.File.Exists(localPath) Then

                        Dim file = IO.File.ReadAllBytes(localPath)

                        Dim memStreamFatturaForInterscambio As System.IO.MemoryStream = Nothing
                        memStreamFatturaForInterscambio = New System.IO.MemoryStream(FixVersioneXml(file).ToArray)
                        Dim documentoFattura As New XmlDocument
                        Try
                            'è un xml forse
                            documentoFattura.Load(memStreamFatturaForInterscambio)
                        Catch ex As Exception
                            'è un p7m forse
                            Try
                                Dim signedCms As New System.Security.Cryptography.Pkcs.SignedCms
                                'SE IL CONTENUTO DEL FILE P7M E' CODIFICATO IN BASE64 LO DECODIFICO
                                Try
                                    file = System.Convert.FromBase64String(System.Text.ASCIIEncoding.Default.GetString(file))
                                Catch ex2 As Exception
                                    'NIENTE
                                End Try
                                signedCms.Decode(file)
                                memStreamFatturaForInterscambio = New MemoryStream(FixVersioneXml(signedCms.ContentInfo.Content).ToArray)
                                documentoFattura.Load(memStreamFatturaForInterscambio)
                            Catch ex2 As Exception
                                'non è un formato valido
                                sb.AppendLine("La fattura elettronica con ident. sdi '" & identificativoSdI & "' non è stata inviata per il seguente motivo:" & vbCrLf & "File '" & nomefile & "' non trovato")
                                'Throw New Exception("Riscontrati problemi nella lettura della Fattura: il file non è valido! " & ex2.Message)
                                documentoFattura = Nothing
                            End Try
                        End Try

                        If (Not documentoFattura Is Nothing) Then
                            Dim datiGeneraliDocumento As XmlNodeList = documentoFattura.GetElementsByTagName("DatiGeneraliDocumento")
                            Dim elemento = datiGeneraliDocumento(0)

                            Dim CessionarioCommittente As XmlNodeList = documentoFattura.GetElementsByTagName("CessionarioCommittente")

                            Dim CedentePrestatore As XmlNodeList = documentoFattura.GetElementsByTagName("CedentePrestatore")
                            Dim idPaeseCedentePrestatore = CedentePrestatore(0).Item("DatiAnagrafici").Item("IdFiscaleIVA").Item("IdPaese").InnerText

                            'For contacicli As Integer = 0 To datiGeneraliDocumento.Count - 1

                            'Dim elemento = datiGeneraliDocumento(contacicli)

                            Dim divisa As String = ""
                            Dim numerofattura As String = ""
                            Dim tipoDocumento As String = ""
                            Dim AnnoFattura As Integer
                            Dim meseFattura As Integer
                            Dim giornoFattura As Integer
                            Dim totaleFattura As Double? = Nothing
                            Try
                                If (elemento.Item("ImportoTotaleDocumento").InnerText <> "") Then
                                    totaleFattura = CDbl(elemento.Item("ImportoTotaleDocumento").InnerText.Replace(".", ","))
                                End If
                            Catch ex As Exception
                                totaleFattura = Nothing
                            End Try

                            numerofattura = elemento.Item("Numero").InnerText

                            AnnoFattura = elemento.Item("Data").InnerText.Substring(0, 4)
                            meseFattura = elemento.Item("Data").InnerText.Substring(5, 2)
                            giornoFattura = elemento.Item("Data").InnerText.Substring(8, 2)

                            tipoDocumento = elemento.Item("TipoDocumento").InnerText
                            divisa = elemento.Item("Divisa").InnerText

                            Dim metaDatoFattura As New wsConservazione.MetaDatoFattura
                            metaDatoFattura.DataDocumento = New Date(AnnoFattura, meseFattura, giornoFattura)
                            metaDatoFattura.FileName = nomefile
                            metaDatoFattura.NumeroDocumento = numerofattura

                            'Dim listaOggetti As New List(Of String)
                            'For contacicli As Integer = 1 To datiGeneraliDocumento.Count - 1
                            '    Dim sottoElemento = datiGeneraliDocumento(contacicli)
                            '    Dim numerofattura2 As String = sottoElemento.Item("Numero").InnerText
                            '    Dim AnnoFattura2 As Integer = sottoElemento.Item("Data").InnerText.Substring(0, 4)
                            '    listaOggetti.Add(numerofattura2 & " / " & AnnoFattura2)
                            'Next
                            'If (listaOggetti.Count > 0) Then
                            '    metaDatoFattura.Oggetto = fattura.Oggetto & "." & vbCrLf & "Lotto contenente  le seguenti altri fatture: " & String.Join("; ", listaOggetti.ToArray)
                            'Else
                            '    metaDatoFattura.Oggetto = fattura.Oggetto
                            'End If

                            metaDatoFattura.Oggetto = fattura.Oggetto
                            metaDatoFattura.Informazioni = metaDatoFattura.Oggetto

                            metaDatoFattura.TipoDocumento = "FATTURAELETTRONICA"
                            metaDatoFattura.codiceDocumento = tipoDocumento
                            metaDatoFattura.tipologiaFattura = "PASSIVA"

                            metaDatoFattura.valuta = divisa
                            metaDatoFattura.totaleFattura = totaleFattura
                            metaDatoFattura.SoggettoProduttoreDocumento = utenteCollegato.Cognome + ", " + utenteCollegato.Nome + If(utenteCollegato.CodiceFiscale <> "", ", " + utenteCollegato.CodiceFiscale, "")

                            metaDatoFattura.codicePaeseCedente = idPaeseCedentePrestatore
                            metaDatoFattura.cedentePrestatoreFattura = fattura.DenominazioneFornitore
                            metaDatoFattura.partitaIVACedentePrestatore = fattura.PartitaIvaFornitore

                            metaDatoFattura.codicePaeseCessionario = "IT"

                            Dim partitaIvaCessionarioCommittente = ""
                            Dim codiceFiscaleCessionarioCommittente = ""
                            Try
                                partitaIvaCessionarioCommittente = CessionarioCommittente(0).Item("DatiAnagrafici").Item("IdFiscaleIVA").Item("IdCodice").InnerText
                            Catch ex As Exception
                                partitaIvaCessionarioCommittente = ""
                            End Try
                            'If (partitaIvaCessionarioCommittente = "") Then
                            Try
                                codiceFiscaleCessionarioCommittente = CessionarioCommittente(0).Item("DatiAnagrafici").Item("CodiceFiscale").InnerText
                            Catch ex As Exception
                                codiceFiscaleCessionarioCommittente = ""
                            End Try

                            Dim denominazioneCessionarioCommittente = ""
                            Try
                                denominazioneCessionarioCommittente = CessionarioCommittente(0).Item("DatiAnagrafici").Item("Anagrafica").Item("Denominazione").InnerText
                                If (denominazioneCessionarioCommittente = "") Then
                                    denominazioneCessionarioCommittente = Me.Cliente.Descrizione
                                End If
                            Catch ex As Exception
                                denominazioneCessionarioCommittente = Me.Cliente.Descrizione
                            End Try
                            metaDatoFattura.cessionarioCommittente = denominazioneCessionarioCommittente 'Me.Cliente.Descrizione
                            metaDatoFattura.partitaIvaCessionarioCommittente = partitaIvaCessionarioCommittente 'Me.Cliente.PIVA
                            metaDatoFattura.codiceFiscaleCessionarioCommittente = codiceFiscaleCessionarioCommittente

                            metaDatoFattura.DataProtocollo = registrazione.DataImmissione
                            metaDatoFattura.NumeroProtocollo = registrazione.NumeroProtocollo

                            Dim fileByte = IO.File.ReadAllBytes(localPath)
                            Select Case enteConservatoreAttivo.ListaEntiConservatori(0).algoritmoImpronta.ToUpper
                                Case ParsecUtility.AlgoritmiImprontaConservazioneEnumeration.SHA1
                                    'retBuffer.Add("SHA1", ParsecUtility.Utility.CalcolaHashFromFile("SHA-1", Buffer))
                                    'metaDatoFattura.AlgoritmoImpronta = ParsecUtility.AlgoritmiImprontaConservazioneEnumeration.SHA_1
                                    metaDatoFattura.ImprontaFile = ParsecUtility.Utility.CalcolaHash(fileByte)
                                    'metaDatoFattura.Impronta = BitConverter.ToString(metaDatoFattura.ImprontaFile).Replace("-", "")
                                    'Case ("aruba")
                                    'retBuffer.Add("SHA-256", ParsecUtility.Utility.CalcolaHashFromFile("SHA-256", Buffer))
                                Case ParsecUtility.AlgoritmiImprontaConservazioneEnumeration.SHA256
                                    'metaDatoFattura.AlgoritmoImpronta = ParsecUtility.AlgoritmiImprontaConservazioneEnumeration.SHA_256
                                    metaDatoFattura.ImprontaFile = ParsecUtility.Utility.CalcolaHash256(fileByte)
                                    'metaDatoFattura.Impronta = BitConverter.ToString(metaDatoFattura.ImprontaFile).Replace("-", "")
                                Case Else
                                    'ParsecCSD.Log4NetSetupLivello.SetupLivelloLog(Log)
                                    'Log.Warn("calcoloImpronta():  non riscontrato alcun Ente Conservatore tra quelli ammessi!")
                                    Throw New Exception("Riscontrati problemi: non riscontrato alcun Ente Conservatore tra quelli ammessi oppure algoritmo impronta non valido!")
                            End Select
                            metaDatoFattura.AlgoritmoImpronta = enteConservatoreAttivo.ListaEntiConservatori(0).algoritmoImpronta.ToUpper

                            Dim metadatofatturaSoap As New wsConservazione.SoapConservaFatturaRequest
                            metadatofatturaSoap.codiceLicenza = Me.Cliente.CodLicenza
                            metadatofatturaSoap.metaDatoFattura = metaDatoFattura
                            metadatofatturaSoap.file = Nothing 'IO.File.ReadAllBytes(pathDownload)
                            metadatofatturaSoap.sourcePath = localPath

                            Dim documentoConservato = wsConservazioneSoap.conservaFatturaOrNotifica(metadatofatturaSoap)

                            If (documentoConservato.messaggioErrore <> "") Then
                                sb.AppendLine("La fattura elettronica con ident. sdi '" & identificativoSdI & "' non è stata esportata per il seguente motivo:" & vbCrLf & documentoConservato.messaggioErrore)
                            Else
                                'salvo l'id del documento del Sistema Archivio
                                fattura.MessaggioSdI.IdDocumentoWS = documentoConservato.ListaDocumentiBase(0).idDocumento
                                fattura.IdStato = StatoFattura.Convervata
                                fatture.Save(fattura)
                            End If
                            'Next

                        End If

                    Else
                        sb.AppendLine("La fattura elettronica con ident. sdi '" & identificativoSdI & "' non è stata esportata per il seguente motivo:" & vbCrLf & "File '" & nomefile & "' non trovato")
                    End If
                Else

                End If
            Catch ex As Exception
                sb.AppendLine("La fattura elettronica " & identificativoSdI & " non è stata esportata per il seguente motivo:" & vbCrLf & ex.Message)
            End Try

        Next

        context.OperationComplete = True

        If sb.Length = 0 Then
            Me.infoOperazioneHidden.Value = "Invio al Modulo Archivio concluso con successo!"
        Else
            ParsecUtility.Utility.MessageBox(sb.ToString, False)
        End If

        Me.AggiornaGriglia()
        wsConservazioneSoap.Dispose()
    End Sub

#End Region

End Class
